'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var dayjs = require('dayjs');
require('../../../../hooks/index2.js');
require('../../../time-picker/index2.js');
require('../../../../utils/index2.js');
var pluginVue_exportHelper = require('../../../../_virtual/plugin-vue_export-helper.js');
var dateUtils = require('../../../time-picker/src/common/date-utils2.js');
var index = require('../../../../hooks/use-locale/index2.js');
var arrays = require('../../../../utils/arrays2.js');
var style = require('../../../../utils/dom/style2.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var dayjs__default = /*#__PURE__*/_interopDefaultLegacy(dayjs);

const datesInYear = (year, lang) => {
  const firstDay = dayjs__default["default"](String(year)).locale(lang).startOf("year");
  const lastDay = firstDay.endOf("year");
  const numOfDays = lastDay.dayOfYear();
  return dateUtils.rangeArr(numOfDays).map((n) => firstDay.add(n, "day").toDate());
};
const _sfc_main = vue.defineComponent({
  props: {
    disabledDate: {
      type: Function
    },
    parsedValue: {
      type: Object
    },
    date: {
      type: Object
    }
  },
  emits: ["pick"],
  expose: ["focus"],
  setup(props, ctx) {
    const { t, lang } = index.useLocale();
    const tbodyRef = vue.ref();
    const currentCellRef = vue.ref();
    const startYear = vue.computed(() => {
      return Math.floor(props.date.year() / 10) * 10;
    });
    vue.watch(() => props.date, async () => {
      var _a, _b;
      if ((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement)) {
        await vue.nextTick();
        (_b = currentCellRef.value) == null ? void 0 : _b.focus();
      }
    });
    const focus = () => {
      var _a;
      (_a = currentCellRef.value) == null ? void 0 : _a.focus();
    };
    const getCellStyle = (year) => {
      const style = {};
      const today = dayjs__default["default"]().locale(lang.value);
      style.disabled = props.disabledDate ? datesInYear(year, lang.value).every(props.disabledDate) : false;
      style.current = arrays.castArray(props.parsedValue).findIndex((_) => _.year() === year) >= 0;
      style.today = today.year() === year;
      return style;
    };
    const isSelectedCell = (year) => {
      return year === startYear.value && props.date.year() < startYear.value && props.date.year() > startYear.value + 9 || arrays.castArray(props.date).findIndex((_) => _.year() === year) >= 0;
    };
    const handleYearTableClick = (event) => {
      const clickTarget = event.target;
      const target = clickTarget.closest("td");
      if (target) {
        if (style.hasClass(target.parentNode, "disabled"))
          return;
        const year = target.textContent || target.innerText;
        ctx.emit("pick", Number(year));
      }
    };
    return {
      t,
      tbodyRef,
      currentCellRef,
      startYear,
      focus,
      isSelectedCell,
      getCellStyle,
      handleYearTableClick
    };
  }
});
const _hoisted_1 = ["aria-label"];
const _hoisted_2 = { ref: "tbodyRef" };
const _hoisted_3 = ["aria-selected", "tabindex"];
const _hoisted_4 = { class: "cell" };
const _hoisted_5 = { key: 1 };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return vue.openBlock(), vue.createElementBlock("table", {
    role: "grid",
    "aria-label": _ctx.t("el.datepicker.yearTablePrompt"),
    class: "el-year-table",
    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleYearTableClick && _ctx.handleYearTableClick(...args))
  }, [
    vue.createElementVNode("tbody", _hoisted_2, [
      (vue.openBlock(), vue.createElementBlock(vue.Fragment, null, vue.renderList(3, (n, i) => {
        return vue.createElementVNode("tr", { key: i }, [
          (vue.openBlock(), vue.createElementBlock(vue.Fragment, null, vue.renderList(4, (nn, j) => {
            return vue.openBlock(), vue.createElementBlock(vue.Fragment, {
              key: i + "_" + j
            }, [
              i * 4 + j < 10 ? (vue.openBlock(), vue.createElementBlock("td", {
                key: 0,
                ref_for: true,
                ref: (el) => _ctx.isSelectedCell(_ctx.startYear + i * 4 + j) && (_ctx.currentCellRef = el),
                class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + i * 4 + j)]),
                "aria-selected": `${_ctx.isSelectedCell(_ctx.startYear + i * 4 + j)}`,
                tabindex: _ctx.isSelectedCell(_ctx.startYear + i * 4 + j) ? 0 : -1,
                onKeydown: [
                  _cache[0] || (_cache[0] = vue.withKeys(vue.withModifiers((...args) => _ctx.handleYearTableClick && _ctx.handleYearTableClick(...args), ["prevent", "stop"]), ["space"])),
                  _cache[1] || (_cache[1] = vue.withKeys(vue.withModifiers((...args) => _ctx.handleYearTableClick && _ctx.handleYearTableClick(...args), ["prevent", "stop"]), ["enter"]))
                ]
              }, [
                vue.createElementVNode("span", _hoisted_4, vue.toDisplayString(_ctx.startYear + i * 4 + j), 1)
              ], 42, _hoisted_3)) : (vue.openBlock(), vue.createElementBlock("td", _hoisted_5))
            ], 64);
          }), 64))
        ]);
      }), 64))
    ], 512)
  ], 8, _hoisted_1);
}
var YearTable = /* @__PURE__ */ pluginVue_exportHelper["default"](_sfc_main, [["render", _sfc_render], ["__file", "/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-year-table.vue"]]);

exports["default"] = YearTable;
//# sourceMappingURL=basic-year-table2.js.map
