declare const _default: import("vue").DefineComponent<{
    readonly pageSize: import("../../../../utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly pageSizes: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<number[]>, () => [10, 20, 30, 40, 50, 100], unknown, unknown, unknown>;
    readonly popperClass: import("../../../../utils").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly disabled: BooleanConstructor;
    readonly size: import("../../../../utils").BuildPropReturn<StringConstructor, "default", unknown, unknown, unknown>;
}, {
    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        readonly pageSize: import("../../../../utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
        readonly pageSizes: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<number[]>, () => [10, 20, 30, 40, 50, 100], unknown, unknown, unknown>;
        readonly popperClass: import("../../../../utils").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
        readonly disabled: BooleanConstructor;
        readonly size: import("../../../../utils").BuildPropReturn<StringConstructor, "default", unknown, unknown, unknown>;
    }>> & {
        "onPage-size-change"?: ((...args: any[]) => any) | undefined;
    }>>;
    emit: (event: "page-size-change", ...args: any[]) => void;
    t: import("element-plus/es/hooks").Translator;
    ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
        };
        cssVar: (object: Record<string, string>) => Record<string, string>;
        cssVarName: (name: string) => string;
        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
        cssVarBlockName: (name: string) => string;
    };
    pagination: import("../../../..").ElPaginationContext;
    innerPageSize: import("vue").Ref<number>;
    innerPageSizes: import("vue").ComputedRef<number[]>;
    handleChange: (val: number) => void;
    ElOption: import("../../../../utils").SFCWithInstall<import("vue").DefineComponent<{
        value: {
            required: true;
            type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
        };
        label: (StringConstructor | NumberConstructor)[];
        created: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        ns: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        currentLabel: import("vue").ComputedRef<any>;
        itemSelected: import("vue").ComputedRef<boolean>;
        isDisabled: import("vue").ComputedRef<any>;
        select: import("element-plus/es/components/select").SelectContext | undefined;
        hoverItem: () => void;
        visible: import("vue").Ref<boolean>;
        hover: import("vue").Ref<boolean>;
        selectOptionClick: () => void;
        states: {
            index: number;
            groupDisabled: boolean;
            visible: boolean;
            hitState: boolean;
            hover: boolean;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        value: {
            required: true;
            type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
        };
        label: (StringConstructor | NumberConstructor)[];
        created: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>>, {
        disabled: boolean;
        created: boolean;
    }>>;
    ElSelect: import("../../../../utils").SFCWithInstall<import("vue").DefineComponent<{
        name: StringConstructor;
        id: StringConstructor;
        modelValue: {
            type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor | ArrayConstructor)[];
            default: undefined;
        };
        autocomplete: {
            type: StringConstructor;
            default: string;
        };
        automaticDropdown: BooleanConstructor;
        size: {
            type: import("vue").PropType<"" | "default" | "small" | "large">;
            validator: (val: string) => val is "" | "default" | "small" | "large";
        };
        effect: {
            type: import("vue").PropType<string>;
            default: string;
        };
        disabled: BooleanConstructor;
        clearable: BooleanConstructor;
        filterable: BooleanConstructor;
        allowCreate: BooleanConstructor;
        loading: BooleanConstructor;
        popperClass: {
            type: StringConstructor;
            default: string;
        };
        remote: BooleanConstructor;
        loadingText: StringConstructor;
        noMatchText: StringConstructor;
        noDataText: StringConstructor;
        remoteMethod: FunctionConstructor;
        filterMethod: FunctionConstructor;
        multiple: BooleanConstructor;
        multipleLimit: {
            type: NumberConstructor;
            default: number;
        };
        placeholder: {
            type: StringConstructor;
        };
        defaultFirstOption: BooleanConstructor;
        reserveKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        valueKey: {
            type: StringConstructor;
            default: string;
        };
        collapseTags: BooleanConstructor;
        collapseTagsTooltip: {
            type: BooleanConstructor;
            default: boolean;
        };
        teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
        persistent: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearIcon: {
            type: import("vue").PropType<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>;
            default: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
        };
        fitInputWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>;
            default: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
        };
        tagType: {
            default: string;
            type: import("vue").PropType<import("../../../../utils").BuildPropType<StringConstructor, "" | "success" | "warning" | "info" | "danger", unknown>>;
            required: false;
            validator: ((val: unknown) => boolean) | undefined;
            __elPropsReservedKey: true;
        };
    }, {
        tagInMultiLine: import("vue").Ref<boolean>;
        prefixWidth: import("vue").Ref<number>;
        selectSize: import("vue").ComputedRef<"" | "default" | "small" | "large">;
        readonly: import("vue").ComputedRef<any>;
        handleResize: () => void;
        collapseTagSize: import("vue").ComputedRef<"default" | "small">;
        debouncedOnInputChange: import("lodash").DebouncedFunc<() => void>;
        debouncedQueryChange: import("lodash").DebouncedFunc<(e: any) => void>;
        deletePrevTag: (e: any) => void;
        deleteTag: (event: any, tag: any) => void;
        deleteSelected: (event: any) => void;
        handleOptionSelect: (option: any, byClick: any) => void;
        scrollToOption: (option: any) => void;
        inputWidth: import("vue").Ref<number>;
        selected: import("vue").Ref<any>;
        inputLength: import("vue").Ref<number>;
        filteredOptionsCount: import("vue").Ref<number>;
        visible: import("vue").Ref<boolean>;
        softFocus: import("vue").Ref<boolean>;
        selectedLabel: import("vue").Ref<string>;
        hoverIndex: import("vue").Ref<number>;
        query: import("vue").Ref<string>;
        inputHovering: import("vue").Ref<boolean>;
        currentPlaceholder: import("vue").Ref<string>;
        menuVisibleOnFocus: import("vue").Ref<boolean>;
        isOnComposition: import("vue").Ref<boolean>;
        isSilentBlur: import("vue").Ref<boolean>;
        options: import("vue").Ref<Map<any, any>>;
        resetInputHeight: () => void;
        managePlaceholder: () => void;
        showClose: import("vue").ComputedRef<any>;
        selectDisabled: import("vue").ComputedRef<any>;
        iconComponent: import("vue").ComputedRef<any>;
        iconReverse: import("vue").ComputedRef<string>;
        showNewOption: import("vue").ComputedRef<any>;
        emptyText: import("vue").ComputedRef<any>;
        toggleLastOptionHitState: (hit?: boolean | undefined) => any;
        resetInputState: (e: KeyboardEvent) => void;
        handleComposition: (event: any) => void;
        handleMenuEnter: () => void;
        handleFocus: (event: any) => void;
        blur: () => void;
        handleBlur: (event: Event) => void;
        handleClearClick: (event: Event) => void;
        handleClose: () => void;
        handleKeydownEscape: (event: KeyboardEvent) => void;
        toggleMenu: () => void;
        selectOption: () => void;
        getValueKey: (item: any) => any;
        navigateOptions: (direction: any) => void;
        dropMenuVisible: import("vue").WritableComputedRef<boolean>;
        focus: () => void;
        reference: import("vue").Ref<import("vue").ComponentPublicInstance<{
            focus: () => void;
            blur: () => void;
            input: HTMLInputElement;
        }, {}, {}, {}, {}, {}, {
            focus: () => void;
            blur: () => void;
            input: HTMLInputElement;
        }, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null>;
        input: import("vue").Ref<HTMLInputElement | null>;
        tooltipRef: import("vue").Ref<({
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: Partial<{
                disabled: boolean;
                trigger: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<"click" | "focus" | "hover" | "contextmenu" | ("click" | "focus" | "hover" | "contextmenu")[]>, unknown, unknown>;
                offset: number;
                effect: string;
                placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                popperClass: string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[];
                showAfter: number;
                hideAfter: number;
                boundariesPadding: number;
                fallbackPlacements: import("@popperjs/core").Placement[];
                gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                popperOptions: Partial<import("@popperjs/core").Options>;
                strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                style: import("vue").StyleValue;
                className: string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[];
                enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                popperStyle: import("vue").StyleValue;
                referenceEl: HTMLElement;
                stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                visible: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<boolean | null>, unknown, unknown>;
                pure: boolean;
                virtualTriggering: boolean;
                appendTo: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<string | HTMLElement>, unknown, unknown>;
                content: string;
                rawContent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                transition: string;
                teleported: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                persistent: boolean;
                open: boolean;
                role: import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>;
                arrowOffset: number;
                virtualRef: import("../../../..").Measurable;
                "onUpdate:visible": (val: boolean) => void;
                openDelay: number;
                visibleArrow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                showArrow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                openDelay: import("../../../../utils").BuildPropReturn<NumberConstructor, number | (() => number) | undefined, unknown, unknown, unknown>;
                visibleArrow: import("../../../../utils").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
                hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, number | (() => number) | undefined, unknown, unknown, unknown>;
                showArrow: import("../../../../utils").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
                arrowOffset: import("../../../../utils").BuildPropReturn<NumberConstructor, 5, unknown, unknown, unknown>;
                disabled: BooleanConstructor;
                trigger: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<"click" | "focus" | "hover" | "contextmenu" | ("click" | "focus" | "hover" | "contextmenu")[]>, "hover", unknown, unknown, unknown>;
                virtualRef: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("../../../..").Measurable>, unknown, unknown, unknown, unknown>;
                virtualTriggering: BooleanConstructor;
                onMouseenter: FunctionConstructor;
                onMouseleave: FunctionConstructor;
                onClick: FunctionConstructor;
                onKeydown: FunctionConstructor;
                onFocus: FunctionConstructor;
                onBlur: FunctionConstructor;
                onContextmenu: FunctionConstructor;
                id: StringConstructor;
                open: BooleanConstructor;
                appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
                content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
                rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                persistent: BooleanConstructor;
                ariaLabel: StringConstructor;
                visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
                transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
                teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                pure: BooleanConstructor;
                focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                zIndex: NumberConstructor;
                boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                "onUpdate:visible": import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<(val: boolean) => void>, never, false, never, never>;
                role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "trigger" | "offset" | "effect" | "placement" | "popperClass" | "showAfter" | "hideAfter" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "popperOptions" | "strategy" | "style" | "className" | "enterable" | "focusOnShow" | "trapping" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "visible" | "pure" | "virtualTriggering" | "appendTo" | "content" | "rawContent" | "transition" | "teleported" | "persistent" | "open" | "role" | "arrowOffset" | "virtualRef" | "onUpdate:visible" | "openDelay" | "visibleArrow" | "showArrow">;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                openDelay: import("../../../../utils").BuildPropReturn<NumberConstructor, number | (() => number) | undefined, unknown, unknown, unknown>;
                visibleArrow: import("../../../../utils").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
                hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, number | (() => number) | undefined, unknown, unknown, unknown>;
                showArrow: import("../../../../utils").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
                arrowOffset: import("../../../../utils").BuildPropReturn<NumberConstructor, 5, unknown, unknown, unknown>;
                disabled: BooleanConstructor;
                trigger: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<"click" | "focus" | "hover" | "contextmenu" | ("click" | "focus" | "hover" | "contextmenu")[]>, "hover", unknown, unknown, unknown>;
                virtualRef: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("../../../..").Measurable>, unknown, unknown, unknown, unknown>;
                virtualTriggering: BooleanConstructor;
                onMouseenter: FunctionConstructor;
                onMouseleave: FunctionConstructor;
                onClick: FunctionConstructor;
                onKeydown: FunctionConstructor;
                onFocus: FunctionConstructor;
                onBlur: FunctionConstructor;
                onContextmenu: FunctionConstructor;
                id: StringConstructor;
                open: BooleanConstructor;
                appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
                content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
                rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                persistent: BooleanConstructor;
                ariaLabel: StringConstructor;
                visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
                transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
                teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                pure: BooleanConstructor;
                focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                zIndex: NumberConstructor;
                boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                "onUpdate:visible": import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<(val: boolean) => void>, never, false, never, never>;
                role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }, {
                compatShowAfter: import("vue").ComputedRef<number>;
                compatShowArrow: import("vue").ComputedRef<import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>>;
                popperRef: import("vue").Ref<({
                    $: import("vue").ComponentInternalInstance;
                    $data: {};
                    $props: Partial<{
                        role: import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>;
                    }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                        readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                    }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "role">;
                    $attrs: {
                        [x: string]: unknown;
                    };
                    $refs: {
                        [x: string]: unknown;
                    };
                    $slots: Readonly<{
                        [name: string]: import("vue").Slot | undefined;
                    }>;
                    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                    $emit: (event: string, ...args: any[]) => void;
                    $el: any;
                    $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                        readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                    }>>, {
                        props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                            readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
                        }>>;
                        triggerRef: import("vue").Ref<HTMLElement | undefined>;
                        popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                        contentRef: import("vue").Ref<HTMLElement | undefined>;
                        referenceRef: import("vue").Ref<HTMLElement | undefined>;
                        role: import("vue").ComputedRef<import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>>;
                        popperProvides: import("../../../..").ElPopperInjectionContext;
                    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
                        role: import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>;
                    }> & {
                        beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                        created?: ((() => void) | (() => void)[]) | undefined;
                        beforeMount?: ((() => void) | (() => void)[]) | undefined;
                        mounted?: ((() => void) | (() => void)[]) | undefined;
                        beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                        updated?: ((() => void) | (() => void)[]) | undefined;
                        activated?: ((() => void) | (() => void)[]) | undefined;
                        deactivated?: ((() => void) | (() => void)[]) | undefined;
                        beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                        beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                        destroyed?: ((() => void) | (() => void)[]) | undefined;
                        unmounted?: ((() => void) | (() => void)[]) | undefined;
                        renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                        renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                        errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                    };
                    $forceUpdate: () => void;
                    $nextTick: typeof import("vue").nextTick;
                    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
                } & Readonly<import("vue").ExtractPropTypes<{
                    readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                }>> & import("vue").ShallowUnwrapRef<{
                    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                        readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                    }>> & {
                        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
                    }>>;
                    triggerRef: import("vue").Ref<HTMLElement | undefined>;
                    popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                    contentRef: import("vue").Ref<HTMLElement | undefined>;
                    referenceRef: import("vue").Ref<HTMLElement | undefined>;
                    role: import("vue").ComputedRef<import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>>;
                    popperProvides: import("../../../..").ElPopperInjectionContext;
                }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
                contentRef: import("vue").Ref<({
                    $: import("vue").ComponentInternalInstance;
                    $data: {};
                    $props: Partial<{
                        disabled: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        offset: number;
                        effect: string;
                        placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                        popperClass: string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[];
                        showAfter: number;
                        hideAfter: number;
                        boundariesPadding: number;
                        fallbackPlacements: import("@popperjs/core").Placement[];
                        gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        popperOptions: Partial<import("@popperjs/core").Options>;
                        strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                        style: import("vue").StyleValue;
                        className: string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[];
                        enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        popperStyle: import("vue").StyleValue;
                        referenceEl: HTMLElement;
                        stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        visible: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<boolean | null>, unknown, unknown>;
                        pure: boolean;
                        virtualTriggering: boolean;
                        appendTo: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<string | HTMLElement>, unknown, unknown>;
                        content: string;
                        rawContent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        transition: string;
                        teleported: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        persistent: boolean;
                    }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                        readonly appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
                        readonly content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
                        readonly rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly persistent: BooleanConstructor;
                        readonly ariaLabel: StringConstructor;
                        readonly visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
                        readonly transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
                        readonly teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly disabled: import("../../../../utils").BuildPropReturn<BooleanConstructor, unknown, unknown, unknown, unknown>;
                        readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                        readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly pure: BooleanConstructor;
                        readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                        readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly virtualTriggering: BooleanConstructor;
                        readonly zIndex: NumberConstructor;
                        readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                        readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                        readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                        readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                        readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        readonly showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 200, unknown, unknown, unknown>;
                    }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "offset" | "effect" | "placement" | "popperClass" | "showAfter" | "hideAfter" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "popperOptions" | "strategy" | "style" | "className" | "enterable" | "focusOnShow" | "trapping" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "visible" | "pure" | "virtualTriggering" | "appendTo" | "content" | "rawContent" | "transition" | "teleported" | "persistent">;
                    $attrs: {
                        [x: string]: unknown;
                    };
                    $refs: {
                        [x: string]: unknown;
                    };
                    $slots: Readonly<{
                        [name: string]: import("vue").Slot | undefined;
                    }>;
                    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                    $emit: (event: string, ...args: any[]) => void;
                    $el: any;
                    $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                        readonly appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
                        readonly content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
                        readonly rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly persistent: BooleanConstructor;
                        readonly ariaLabel: StringConstructor;
                        readonly visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
                        readonly transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
                        readonly teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly disabled: import("../../../../utils").BuildPropReturn<BooleanConstructor, unknown, unknown, unknown, unknown>;
                        readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                        readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly pure: BooleanConstructor;
                        readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                        readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly virtualTriggering: BooleanConstructor;
                        readonly zIndex: NumberConstructor;
                        readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                        readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                        readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                        readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                        readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        readonly showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 200, unknown, unknown, unknown>;
                    }>>, {
                        ariaHidden: import("vue").ComputedRef<boolean>;
                        entering: import("vue").Ref<boolean>;
                        leaving: import("vue").Ref<boolean>;
                        id: import("vue").Ref<string>;
                        intermediateOpen: import("vue").Ref<boolean>;
                        contentStyle: import("vue").ComputedRef<any>;
                        contentRef: import("vue").Ref<({
                            $: import("vue").ComponentInternalInstance;
                            $data: {};
                            $props: Partial<{
                                offset: number;
                                effect: string;
                                placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                                popperClass: string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[];
                                boundariesPadding: number;
                                fallbackPlacements: import("@popperjs/core").Placement[];
                                gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                popperOptions: Partial<import("@popperjs/core").Options>;
                                strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                                style: import("vue").StyleValue;
                                className: string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[];
                                enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                popperStyle: import("vue").StyleValue;
                                referenceEl: HTMLElement;
                                stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                ariaLabel: string;
                                visible: boolean;
                                pure: boolean;
                                virtualTriggering: boolean;
                            }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                                readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                                readonly visible: BooleanConstructor;
                                readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly pure: BooleanConstructor;
                                readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                                readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                                readonly virtualTriggering: BooleanConstructor;
                                readonly zIndex: NumberConstructor;
                                readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                                readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                                readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                                readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                                readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                                readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                            }>> & {
                                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "offset" | "effect" | "placement" | "popperClass" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "popperOptions" | "strategy" | "style" | "className" | "enterable" | "focusOnShow" | "trapping" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "ariaLabel" | "visible" | "pure" | "virtualTriggering">;
                            $attrs: {
                                [x: string]: unknown;
                            };
                            $refs: {
                                [x: string]: unknown;
                            };
                            $slots: Readonly<{
                                [name: string]: import("vue").Slot | undefined;
                            }>;
                            $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                            $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                            $emit: (event: string, ...args: any[]) => void;
                            $el: any;
                            $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                                readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                                readonly visible: BooleanConstructor;
                                readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly pure: BooleanConstructor;
                                readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                                readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                                readonly virtualTriggering: BooleanConstructor;
                                readonly zIndex: NumberConstructor;
                                readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                                readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                                readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                                readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                                readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                                readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                            }>> & {
                                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                            }, {
                                emit: (event: string, ...args: any[]) => void;
                                props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                                    readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                    readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                    readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                                    readonly visible: BooleanConstructor;
                                    readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                    readonly pure: BooleanConstructor;
                                    readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                    readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                    readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | (string | {
                                        [x: string]: boolean;
                                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                    readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                    readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                                    readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                    readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                                    readonly virtualTriggering: BooleanConstructor;
                                    readonly zIndex: NumberConstructor;
                                    readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                                    readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                                    readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                    readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                                    readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                                    readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                                    readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                                }>> & {
                                    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                                }>>;
                                popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                                contentRef: import("vue").Ref<HTMLElement | undefined>;
                                triggerRef: import("vue").Ref<import("../../../..").Measurable | undefined>;
                                role: import("vue").ComputedRef<string>;
                                formItemContext: import("../../../..").FormItemContext | undefined;
                                nextZIndex: () => number;
                                ns: {
                                    namespace: import("vue").ComputedRef<string>;
                                    b: (blockSuffix?: string) => string;
                                    e: (element?: string | undefined) => string;
                                    m: (modifier?: string | undefined) => string;
                                    be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                                    em: (element?: string | undefined, modifier?: string | undefined) => string;
                                    bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                                    bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                                    is: {
                                        (name: string, state: boolean | undefined): string;
                                        (name: string): string;
                                    };
                                    cssVar: (object: Record<string, string>) => Record<string, string>;
                                    cssVarName: (name: string) => string;
                                    cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                                    cssVarBlockName: (name: string) => string;
                                };
                                popperContentRef: import("vue").Ref<HTMLElement | undefined>;
                                focusStartRef: import("vue").Ref<string | HTMLElement>;
                                arrowRef: import("vue").Ref<HTMLElement | undefined>;
                                arrowOffset: import("vue").Ref<number | undefined>;
                                contentZIndex: import("vue").Ref<number>;
                                trapped: import("vue").Ref<boolean>;
                                computedReference: import("vue").ComputedRef<import("../../../..").Measurable | undefined>;
                                contentStyle: import("vue").ComputedRef<any>;
                                contentClass: import("vue").ComputedRef<((string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
                                ariaModal: import("vue").ComputedRef<string | undefined>;
                                createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
                                    referenceEl: any;
                                    popperContentEl: any;
                                    arrowEl: any;
                                }) => import("@popperjs/core").Instance;
                                updatePopper: (shouldUpdateZIndex?: boolean) => void;
                                togglePopperAlive: () => void;
                                onFocusAfterTrapped: () => void;
                                onFocusAfterReleased: () => void;
                                onFocusInTrap: (event: FocusEvent) => void;
                                onFocusoutPrevented: () => void;
                                onReleaseRequested: () => void;
                                ElFocusTrap: import("vue").DefineComponent<{
                                    loop: BooleanConstructor;
                                    trapped: BooleanConstructor;
                                    focusTrapEl: import("vue").PropType<HTMLElement>;
                                    focusStartEl: {
                                        type: import("vue").PropType<HTMLElement | "first" | "container">;
                                        default: string;
                                    };
                                }, {
                                    onKeydown: (e: KeyboardEvent) => void;
                                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested")[], "focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                                    loop: BooleanConstructor;
                                    trapped: BooleanConstructor;
                                    focusTrapEl: import("vue").PropType<HTMLElement>;
                                    focusStartEl: {
                                        type: import("vue").PropType<HTMLElement | "first" | "container">;
                                        default: string;
                                    };
                                }>> & {
                                    onFocusAfterTrapped?: ((...args: any[]) => any) | undefined;
                                    onFocusAfterReleased?: ((...args: any[]) => any) | undefined;
                                    onFocusin?: ((...args: any[]) => any) | undefined;
                                    onFocusout?: ((...args: any[]) => any) | undefined;
                                    "onFocusout-prevented"?: ((...args: any[]) => any) | undefined;
                                    "onRelease-requested"?: ((...args: any[]) => any) | undefined;
                                }, {
                                    loop: boolean;
                                    trapped: boolean;
                                    focusStartEl: HTMLElement | "first" | "container";
                                }>;
                            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
                                offset: number;
                                effect: string;
                                placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                                popperClass: string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[];
                                boundariesPadding: number;
                                fallbackPlacements: import("@popperjs/core").Placement[];
                                gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                popperOptions: Partial<import("@popperjs/core").Options>;
                                strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                                style: import("vue").StyleValue;
                                className: string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[];
                                enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                popperStyle: import("vue").StyleValue;
                                referenceEl: HTMLElement;
                                stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                                ariaLabel: string;
                                visible: boolean;
                                pure: boolean;
                                virtualTriggering: boolean;
                            }> & {
                                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                                created?: ((() => void) | (() => void)[]) | undefined;
                                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                                mounted?: ((() => void) | (() => void)[]) | undefined;
                                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                                updated?: ((() => void) | (() => void)[]) | undefined;
                                activated?: ((() => void) | (() => void)[]) | undefined;
                                deactivated?: ((() => void) | (() => void)[]) | undefined;
                                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                                destroyed?: ((() => void) | (() => void)[]) | undefined;
                                unmounted?: ((() => void) | (() => void)[]) | undefined;
                                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                            };
                            $forceUpdate: () => void;
                            $nextTick: typeof import("vue").nextTick;
                            $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
                        } & Readonly<import("vue").ExtractPropTypes<{
                            readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                            readonly visible: BooleanConstructor;
                            readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly pure: BooleanConstructor;
                            readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                            readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                            readonly virtualTriggering: BooleanConstructor;
                            readonly zIndex: NumberConstructor;
                            readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                            readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                            readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                            readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                            readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                            readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        } & import("vue").ShallowUnwrapRef<{
                            emit: (event: string, ...args: any[]) => void;
                            props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                                readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                                readonly visible: BooleanConstructor;
                                readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly pure: BooleanConstructor;
                                readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                                readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                                readonly virtualTriggering: BooleanConstructor;
                                readonly zIndex: NumberConstructor;
                                readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                                readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                                readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                                readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                                readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                                readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                            }>> & {
                                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                            }>>;
                            popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                            contentRef: import("vue").Ref<HTMLElement | undefined>;
                            triggerRef: import("vue").Ref<import("../../../..").Measurable | undefined>;
                            role: import("vue").ComputedRef<string>;
                            formItemContext: import("../../../..").FormItemContext | undefined;
                            nextZIndex: () => number;
                            ns: {
                                namespace: import("vue").ComputedRef<string>;
                                b: (blockSuffix?: string) => string;
                                e: (element?: string | undefined) => string;
                                m: (modifier?: string | undefined) => string;
                                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                                em: (element?: string | undefined, modifier?: string | undefined) => string;
                                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                                is: {
                                    (name: string, state: boolean | undefined): string;
                                    (name: string): string;
                                };
                                cssVar: (object: Record<string, string>) => Record<string, string>;
                                cssVarName: (name: string) => string;
                                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                                cssVarBlockName: (name: string) => string;
                            };
                            popperContentRef: import("vue").Ref<HTMLElement | undefined>;
                            focusStartRef: import("vue").Ref<string | HTMLElement>;
                            arrowRef: import("vue").Ref<HTMLElement | undefined>;
                            arrowOffset: import("vue").Ref<number | undefined>;
                            contentZIndex: import("vue").Ref<number>;
                            trapped: import("vue").Ref<boolean>;
                            computedReference: import("vue").ComputedRef<import("../../../..").Measurable | undefined>;
                            contentStyle: import("vue").ComputedRef<any>;
                            contentClass: import("vue").ComputedRef<((string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
                            ariaModal: import("vue").ComputedRef<string | undefined>;
                            createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
                                referenceEl: any;
                                popperContentEl: any;
                                arrowEl: any;
                            }) => import("@popperjs/core").Instance;
                            updatePopper: (shouldUpdateZIndex?: boolean) => void;
                            togglePopperAlive: () => void;
                            onFocusAfterTrapped: () => void;
                            onFocusAfterReleased: () => void;
                            onFocusInTrap: (event: FocusEvent) => void;
                            onFocusoutPrevented: () => void;
                            onReleaseRequested: () => void;
                            ElFocusTrap: import("vue").DefineComponent<{
                                loop: BooleanConstructor;
                                trapped: BooleanConstructor;
                                focusTrapEl: import("vue").PropType<HTMLElement>;
                                focusStartEl: {
                                    type: import("vue").PropType<HTMLElement | "first" | "container">;
                                    default: string;
                                };
                            }, {
                                onKeydown: (e: KeyboardEvent) => void;
                            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested")[], "focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                                loop: BooleanConstructor;
                                trapped: BooleanConstructor;
                                focusTrapEl: import("vue").PropType<HTMLElement>;
                                focusStartEl: {
                                    type: import("vue").PropType<HTMLElement | "first" | "container">;
                                    default: string;
                                };
                            }>> & {
                                onFocusAfterTrapped?: ((...args: any[]) => any) | undefined;
                                onFocusAfterReleased?: ((...args: any[]) => any) | undefined;
                                onFocusin?: ((...args: any[]) => any) | undefined;
                                onFocusout?: ((...args: any[]) => any) | undefined;
                                "onFocusout-prevented"?: ((...args: any[]) => any) | undefined;
                                "onRelease-requested"?: ((...args: any[]) => any) | undefined;
                            }, {
                                loop: boolean;
                                trapped: boolean;
                                focusStartEl: HTMLElement | "first" | "container";
                            }>;
                        }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
                        destroyed: import("vue").Ref<boolean>;
                        shouldRender: import("vue").ComputedRef<boolean>;
                        shouldShow: import("vue").ComputedRef<boolean>;
                        onClose: (e?: Event | undefined) => void;
                        open: import("vue").Ref<boolean>;
                        onAfterShow: () => void;
                        onBeforeEnter: () => void;
                        onBeforeLeave: () => void;
                        onContentEnter: (event: unknown) => void;
                        onContentLeave: (event: unknown) => void;
                        onTransitionLeave: () => void;
                        onBlur: () => void;
                    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
                        disabled: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        offset: number;
                        effect: string;
                        placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                        popperClass: string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[];
                        showAfter: number;
                        hideAfter: number;
                        boundariesPadding: number;
                        fallbackPlacements: import("@popperjs/core").Placement[];
                        gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        popperOptions: Partial<import("@popperjs/core").Options>;
                        strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                        style: import("vue").StyleValue;
                        className: string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[];
                        enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        popperStyle: import("vue").StyleValue;
                        referenceEl: HTMLElement;
                        stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        visible: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<boolean | null>, unknown, unknown>;
                        pure: boolean;
                        virtualTriggering: boolean;
                        appendTo: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<string | HTMLElement>, unknown, unknown>;
                        content: string;
                        rawContent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        transition: string;
                        teleported: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        persistent: boolean;
                    }> & {
                        beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                        created?: ((() => void) | (() => void)[]) | undefined;
                        beforeMount?: ((() => void) | (() => void)[]) | undefined;
                        mounted?: ((() => void) | (() => void)[]) | undefined;
                        beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                        updated?: ((() => void) | (() => void)[]) | undefined;
                        activated?: ((() => void) | (() => void)[]) | undefined;
                        deactivated?: ((() => void) | (() => void)[]) | undefined;
                        beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                        beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                        destroyed?: ((() => void) | (() => void)[]) | undefined;
                        unmounted?: ((() => void) | (() => void)[]) | undefined;
                        renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                        renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                        errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                    };
                    $forceUpdate: () => void;
                    $nextTick: typeof import("vue").nextTick;
                    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
                } & Readonly<import("vue").ExtractPropTypes<{
                    readonly appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
                    readonly content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
                    readonly rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly persistent: BooleanConstructor;
                    readonly ariaLabel: StringConstructor;
                    readonly visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
                    readonly transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
                    readonly teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly disabled: import("../../../../utils").BuildPropReturn<BooleanConstructor, unknown, unknown, unknown, unknown>;
                    readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                    readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                    readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                    readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly pure: BooleanConstructor;
                    readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                    readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                    readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                    readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly virtualTriggering: BooleanConstructor;
                    readonly zIndex: NumberConstructor;
                    readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                    readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                    readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                    readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                    readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                    readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                    readonly showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                    readonly hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 200, unknown, unknown, unknown>;
                }>> & import("vue").ShallowUnwrapRef<{
                    ariaHidden: import("vue").ComputedRef<boolean>;
                    entering: import("vue").Ref<boolean>;
                    leaving: import("vue").Ref<boolean>;
                    id: import("vue").Ref<string>;
                    intermediateOpen: import("vue").Ref<boolean>;
                    contentStyle: import("vue").ComputedRef<any>;
                    contentRef: import("vue").Ref<({
                        $: import("vue").ComponentInternalInstance;
                        $data: {};
                        $props: Partial<{
                            offset: number;
                            effect: string;
                            placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                            popperClass: string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[];
                            boundariesPadding: number;
                            fallbackPlacements: import("@popperjs/core").Placement[];
                            gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            popperOptions: Partial<import("@popperjs/core").Options>;
                            strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                            style: import("vue").StyleValue;
                            className: string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[];
                            enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            popperStyle: import("vue").StyleValue;
                            referenceEl: HTMLElement;
                            stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            ariaLabel: string;
                            visible: boolean;
                            pure: boolean;
                            virtualTriggering: boolean;
                        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                            readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                            readonly visible: BooleanConstructor;
                            readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly pure: BooleanConstructor;
                            readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                            readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                            readonly virtualTriggering: BooleanConstructor;
                            readonly zIndex: NumberConstructor;
                            readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                            readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                            readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                            readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                            readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                            readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "offset" | "effect" | "placement" | "popperClass" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "popperOptions" | "strategy" | "style" | "className" | "enterable" | "focusOnShow" | "trapping" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "ariaLabel" | "visible" | "pure" | "virtualTriggering">;
                        $attrs: {
                            [x: string]: unknown;
                        };
                        $refs: {
                            [x: string]: unknown;
                        };
                        $slots: Readonly<{
                            [name: string]: import("vue").Slot | undefined;
                        }>;
                        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                        $emit: (event: string, ...args: any[]) => void;
                        $el: any;
                        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                            readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                            readonly visible: BooleanConstructor;
                            readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly pure: BooleanConstructor;
                            readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                            readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                            readonly virtualTriggering: BooleanConstructor;
                            readonly zIndex: NumberConstructor;
                            readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                            readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                            readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                            readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                            readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                            readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        }, {
                            emit: (event: string, ...args: any[]) => void;
                            props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                                readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                                readonly visible: BooleanConstructor;
                                readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly pure: BooleanConstructor;
                                readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                                readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                                readonly virtualTriggering: BooleanConstructor;
                                readonly zIndex: NumberConstructor;
                                readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                                readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                                readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                                readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                                readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                                readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                            }>> & {
                                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                            }>>;
                            popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                            contentRef: import("vue").Ref<HTMLElement | undefined>;
                            triggerRef: import("vue").Ref<import("../../../..").Measurable | undefined>;
                            role: import("vue").ComputedRef<string>;
                            formItemContext: import("../../../..").FormItemContext | undefined;
                            nextZIndex: () => number;
                            ns: {
                                namespace: import("vue").ComputedRef<string>;
                                b: (blockSuffix?: string) => string;
                                e: (element?: string | undefined) => string;
                                m: (modifier?: string | undefined) => string;
                                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                                em: (element?: string | undefined, modifier?: string | undefined) => string;
                                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                                is: {
                                    (name: string, state: boolean | undefined): string;
                                    (name: string): string;
                                };
                                cssVar: (object: Record<string, string>) => Record<string, string>;
                                cssVarName: (name: string) => string;
                                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                                cssVarBlockName: (name: string) => string;
                            };
                            popperContentRef: import("vue").Ref<HTMLElement | undefined>;
                            focusStartRef: import("vue").Ref<string | HTMLElement>;
                            arrowRef: import("vue").Ref<HTMLElement | undefined>;
                            arrowOffset: import("vue").Ref<number | undefined>;
                            contentZIndex: import("vue").Ref<number>;
                            trapped: import("vue").Ref<boolean>;
                            computedReference: import("vue").ComputedRef<import("../../../..").Measurable | undefined>;
                            contentStyle: import("vue").ComputedRef<any>;
                            contentClass: import("vue").ComputedRef<((string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
                            ariaModal: import("vue").ComputedRef<string | undefined>;
                            createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
                                referenceEl: any;
                                popperContentEl: any;
                                arrowEl: any;
                            }) => import("@popperjs/core").Instance;
                            updatePopper: (shouldUpdateZIndex?: boolean) => void;
                            togglePopperAlive: () => void;
                            onFocusAfterTrapped: () => void;
                            onFocusAfterReleased: () => void;
                            onFocusInTrap: (event: FocusEvent) => void;
                            onFocusoutPrevented: () => void;
                            onReleaseRequested: () => void;
                            ElFocusTrap: import("vue").DefineComponent<{
                                loop: BooleanConstructor;
                                trapped: BooleanConstructor;
                                focusTrapEl: import("vue").PropType<HTMLElement>;
                                focusStartEl: {
                                    type: import("vue").PropType<HTMLElement | "first" | "container">;
                                    default: string;
                                };
                            }, {
                                onKeydown: (e: KeyboardEvent) => void;
                            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested")[], "focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                                loop: BooleanConstructor;
                                trapped: BooleanConstructor;
                                focusTrapEl: import("vue").PropType<HTMLElement>;
                                focusStartEl: {
                                    type: import("vue").PropType<HTMLElement | "first" | "container">;
                                    default: string;
                                };
                            }>> & {
                                onFocusAfterTrapped?: ((...args: any[]) => any) | undefined;
                                onFocusAfterReleased?: ((...args: any[]) => any) | undefined;
                                onFocusin?: ((...args: any[]) => any) | undefined;
                                onFocusout?: ((...args: any[]) => any) | undefined;
                                "onFocusout-prevented"?: ((...args: any[]) => any) | undefined;
                                "onRelease-requested"?: ((...args: any[]) => any) | undefined;
                            }, {
                                loop: boolean;
                                trapped: boolean;
                                focusStartEl: HTMLElement | "first" | "container";
                            }>;
                        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
                            offset: number;
                            effect: string;
                            placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                            popperClass: string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[];
                            boundariesPadding: number;
                            fallbackPlacements: import("@popperjs/core").Placement[];
                            gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            popperOptions: Partial<import("@popperjs/core").Options>;
                            strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                            style: import("vue").StyleValue;
                            className: string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[];
                            enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            popperStyle: import("vue").StyleValue;
                            referenceEl: HTMLElement;
                            stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            ariaLabel: string;
                            visible: boolean;
                            pure: boolean;
                            virtualTriggering: boolean;
                        }> & {
                            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                            created?: ((() => void) | (() => void)[]) | undefined;
                            beforeMount?: ((() => void) | (() => void)[]) | undefined;
                            mounted?: ((() => void) | (() => void)[]) | undefined;
                            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                            updated?: ((() => void) | (() => void)[]) | undefined;
                            activated?: ((() => void) | (() => void)[]) | undefined;
                            deactivated?: ((() => void) | (() => void)[]) | undefined;
                            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                            destroyed?: ((() => void) | (() => void)[]) | undefined;
                            unmounted?: ((() => void) | (() => void)[]) | undefined;
                            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                        };
                        $forceUpdate: () => void;
                        $nextTick: typeof import("vue").nextTick;
                        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
                    } & Readonly<import("vue").ExtractPropTypes<{
                        readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                        readonly visible: BooleanConstructor;
                        readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly pure: BooleanConstructor;
                        readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                        readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                        readonly virtualTriggering: BooleanConstructor;
                        readonly zIndex: NumberConstructor;
                        readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                        readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                        readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                        readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                        readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                    }>> & {
                        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                    } & import("vue").ShallowUnwrapRef<{
                        emit: (event: string, ...args: any[]) => void;
                        props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                            readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                            readonly visible: BooleanConstructor;
                            readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly pure: BooleanConstructor;
                            readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                            readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                            readonly virtualTriggering: BooleanConstructor;
                            readonly zIndex: NumberConstructor;
                            readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                            readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                            readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                            readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                            readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                            readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        }>>;
                        popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                        contentRef: import("vue").Ref<HTMLElement | undefined>;
                        triggerRef: import("vue").Ref<import("../../../..").Measurable | undefined>;
                        role: import("vue").ComputedRef<string>;
                        formItemContext: import("../../../..").FormItemContext | undefined;
                        nextZIndex: () => number;
                        ns: {
                            namespace: import("vue").ComputedRef<string>;
                            b: (blockSuffix?: string) => string;
                            e: (element?: string | undefined) => string;
                            m: (modifier?: string | undefined) => string;
                            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                            em: (element?: string | undefined, modifier?: string | undefined) => string;
                            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                            is: {
                                (name: string, state: boolean | undefined): string;
                                (name: string): string;
                            };
                            cssVar: (object: Record<string, string>) => Record<string, string>;
                            cssVarName: (name: string) => string;
                            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                            cssVarBlockName: (name: string) => string;
                        };
                        popperContentRef: import("vue").Ref<HTMLElement | undefined>;
                        focusStartRef: import("vue").Ref<string | HTMLElement>;
                        arrowRef: import("vue").Ref<HTMLElement | undefined>;
                        arrowOffset: import("vue").Ref<number | undefined>;
                        contentZIndex: import("vue").Ref<number>;
                        trapped: import("vue").Ref<boolean>;
                        computedReference: import("vue").ComputedRef<import("../../../..").Measurable | undefined>;
                        contentStyle: import("vue").ComputedRef<any>;
                        contentClass: import("vue").ComputedRef<((string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
                        ariaModal: import("vue").ComputedRef<string | undefined>;
                        createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
                            referenceEl: any;
                            popperContentEl: any;
                            arrowEl: any;
                        }) => import("@popperjs/core").Instance;
                        updatePopper: (shouldUpdateZIndex?: boolean) => void;
                        togglePopperAlive: () => void;
                        onFocusAfterTrapped: () => void;
                        onFocusAfterReleased: () => void;
                        onFocusInTrap: (event: FocusEvent) => void;
                        onFocusoutPrevented: () => void;
                        onReleaseRequested: () => void;
                        ElFocusTrap: import("vue").DefineComponent<{
                            loop: BooleanConstructor;
                            trapped: BooleanConstructor;
                            focusTrapEl: import("vue").PropType<HTMLElement>;
                            focusStartEl: {
                                type: import("vue").PropType<HTMLElement | "first" | "container">;
                                default: string;
                            };
                        }, {
                            onKeydown: (e: KeyboardEvent) => void;
                        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested")[], "focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                            loop: BooleanConstructor;
                            trapped: BooleanConstructor;
                            focusTrapEl: import("vue").PropType<HTMLElement>;
                            focusStartEl: {
                                type: import("vue").PropType<HTMLElement | "first" | "container">;
                                default: string;
                            };
                        }>> & {
                            onFocusAfterTrapped?: ((...args: any[]) => any) | undefined;
                            onFocusAfterReleased?: ((...args: any[]) => any) | undefined;
                            onFocusin?: ((...args: any[]) => any) | undefined;
                            onFocusout?: ((...args: any[]) => any) | undefined;
                            "onFocusout-prevented"?: ((...args: any[]) => any) | undefined;
                            "onRelease-requested"?: ((...args: any[]) => any) | undefined;
                        }, {
                            loop: boolean;
                            trapped: boolean;
                            focusStartEl: HTMLElement | "first" | "container";
                        }>;
                    }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
                    destroyed: import("vue").Ref<boolean>;
                    shouldRender: import("vue").ComputedRef<boolean>;
                    shouldShow: import("vue").ComputedRef<boolean>;
                    onClose: (e?: Event | undefined) => void;
                    open: import("vue").Ref<boolean>;
                    onAfterShow: () => void;
                    onBeforeEnter: () => void;
                    onBeforeLeave: () => void;
                    onContentEnter: (event: unknown) => void;
                    onContentLeave: (event: unknown) => void;
                    onTransitionLeave: () => void;
                    onBlur: () => void;
                }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
                open: import("vue").Ref<boolean>;
                hide: () => void;
                isFocusInsideContent: () => boolean | undefined;
                updatePopper: () => void;
                onOpen: (event?: Event | undefined) => void;
                onClose: (event?: Event | undefined) => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
                disabled: boolean;
                trigger: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<"click" | "focus" | "hover" | "contextmenu" | ("click" | "focus" | "hover" | "contextmenu")[]>, unknown, unknown>;
                offset: number;
                effect: string;
                placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                popperClass: string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[];
                showAfter: number;
                hideAfter: number;
                boundariesPadding: number;
                fallbackPlacements: import("@popperjs/core").Placement[];
                gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                popperOptions: Partial<import("@popperjs/core").Options>;
                strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                style: import("vue").StyleValue;
                className: string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[];
                enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                popperStyle: import("vue").StyleValue;
                referenceEl: HTMLElement;
                stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                visible: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<boolean | null>, unknown, unknown>;
                pure: boolean;
                virtualTriggering: boolean;
                appendTo: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<string | HTMLElement>, unknown, unknown>;
                content: string;
                rawContent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                transition: string;
                teleported: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                persistent: boolean;
                open: boolean;
                role: import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>;
                arrowOffset: number;
                virtualRef: import("../../../..").Measurable;
                "onUpdate:visible": (val: boolean) => void;
                openDelay: number;
                visibleArrow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                showArrow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
            }> & {
                beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                created?: ((() => void) | (() => void)[]) | undefined;
                beforeMount?: ((() => void) | (() => void)[]) | undefined;
                mounted?: ((() => void) | (() => void)[]) | undefined;
                beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                updated?: ((() => void) | (() => void)[]) | undefined;
                activated?: ((() => void) | (() => void)[]) | undefined;
                deactivated?: ((() => void) | (() => void)[]) | undefined;
                beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                destroyed?: ((() => void) | (() => void)[]) | undefined;
                unmounted?: ((() => void) | (() => void)[]) | undefined;
                renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        } & Readonly<import("vue").ExtractPropTypes<{
            openDelay: import("../../../../utils").BuildPropReturn<NumberConstructor, number | (() => number) | undefined, unknown, unknown, unknown>;
            visibleArrow: import("../../../../utils").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
            hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, number | (() => number) | undefined, unknown, unknown, unknown>;
            showArrow: import("../../../../utils").BuildPropReturn<BooleanConstructor, boolean | (() => false) | (() => true) | undefined, unknown, unknown, unknown>;
            arrowOffset: import("../../../../utils").BuildPropReturn<NumberConstructor, 5, unknown, unknown, unknown>;
            disabled: BooleanConstructor;
            trigger: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<"click" | "focus" | "hover" | "contextmenu" | ("click" | "focus" | "hover" | "contextmenu")[]>, "hover", unknown, unknown, unknown>;
            virtualRef: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("../../../..").Measurable>, unknown, unknown, unknown, unknown>;
            virtualTriggering: BooleanConstructor;
            onMouseenter: FunctionConstructor;
            onMouseleave: FunctionConstructor;
            onClick: FunctionConstructor;
            onKeydown: FunctionConstructor;
            onFocus: FunctionConstructor;
            onBlur: FunctionConstructor;
            onContextmenu: FunctionConstructor;
            id: StringConstructor;
            open: BooleanConstructor;
            appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
            content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
            rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
            persistent: BooleanConstructor;
            ariaLabel: StringConstructor;
            visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
            transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
            teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
            style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
            className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
            effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
            enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
            pure: BooleanConstructor;
            focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
            trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
            popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | (string | {
                [x: string]: boolean;
            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
            popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
            referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
            stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
            zIndex: NumberConstructor;
            boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
            fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
            gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
            offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
            placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
            popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
            strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
            showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
            "onUpdate:visible": import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<(val: boolean) => void>, never, false, never, never>;
            role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        } & import("vue").ShallowUnwrapRef<{
            compatShowAfter: import("vue").ComputedRef<number>;
            compatShowArrow: import("vue").ComputedRef<import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>>;
            popperRef: import("vue").Ref<({
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    role: import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "role">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: string, ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                }>>, {
                    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                        readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                    }>> & {
                        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
                    }>>;
                    triggerRef: import("vue").Ref<HTMLElement | undefined>;
                    popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                    contentRef: import("vue").Ref<HTMLElement | undefined>;
                    referenceRef: import("vue").Ref<HTMLElement | undefined>;
                    role: import("vue").ComputedRef<import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>>;
                    popperProvides: import("../../../..").ElPopperInjectionContext;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
                    role: import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
            }>> & import("vue").ShallowUnwrapRef<{
                props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                    readonly role: import("../../../../utils").BuildPropReturn<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], "tooltip", unknown, unknown, unknown>;
                }>> & {
                    [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
                }>>;
                triggerRef: import("vue").Ref<HTMLElement | undefined>;
                popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                contentRef: import("vue").Ref<HTMLElement | undefined>;
                referenceRef: import("vue").Ref<HTMLElement | undefined>;
                role: import("vue").ComputedRef<import("../../../../utils").BuildPropType<(new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") | ((new (...args: any[]) => ("grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree") & {}) | (() => "grid" | "listbox" | "menu" | "tooltip" | "dialog" | "tree"))[], unknown, unknown>>;
                popperProvides: import("../../../..").ElPopperInjectionContext;
            }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
            contentRef: import("vue").Ref<({
                $: import("vue").ComponentInternalInstance;
                $data: {};
                $props: Partial<{
                    disabled: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    offset: number;
                    effect: string;
                    placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                    popperClass: string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[];
                    showAfter: number;
                    hideAfter: number;
                    boundariesPadding: number;
                    fallbackPlacements: import("@popperjs/core").Placement[];
                    gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    popperOptions: Partial<import("@popperjs/core").Options>;
                    strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                    style: import("vue").StyleValue;
                    className: string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[];
                    enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    popperStyle: import("vue").StyleValue;
                    referenceEl: HTMLElement;
                    stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    visible: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<boolean | null>, unknown, unknown>;
                    pure: boolean;
                    virtualTriggering: boolean;
                    appendTo: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<string | HTMLElement>, unknown, unknown>;
                    content: string;
                    rawContent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    transition: string;
                    teleported: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    persistent: boolean;
                }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                    readonly appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
                    readonly content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
                    readonly rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly persistent: BooleanConstructor;
                    readonly ariaLabel: StringConstructor;
                    readonly visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
                    readonly transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
                    readonly teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly disabled: import("../../../../utils").BuildPropReturn<BooleanConstructor, unknown, unknown, unknown, unknown>;
                    readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                    readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                    readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                    readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly pure: BooleanConstructor;
                    readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                    readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                    readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                    readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly virtualTriggering: BooleanConstructor;
                    readonly zIndex: NumberConstructor;
                    readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                    readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                    readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                    readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                    readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                    readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                    readonly showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                    readonly hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 200, unknown, unknown, unknown>;
                }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "offset" | "effect" | "placement" | "popperClass" | "showAfter" | "hideAfter" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "popperOptions" | "strategy" | "style" | "className" | "enterable" | "focusOnShow" | "trapping" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "visible" | "pure" | "virtualTriggering" | "appendTo" | "content" | "rawContent" | "transition" | "teleported" | "persistent">;
                $attrs: {
                    [x: string]: unknown;
                };
                $refs: {
                    [x: string]: unknown;
                };
                $slots: Readonly<{
                    [name: string]: import("vue").Slot | undefined;
                }>;
                $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                $emit: (event: string, ...args: any[]) => void;
                $el: any;
                $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                    readonly appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
                    readonly content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
                    readonly rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly persistent: BooleanConstructor;
                    readonly ariaLabel: StringConstructor;
                    readonly visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
                    readonly transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
                    readonly teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly disabled: import("../../../../utils").BuildPropReturn<BooleanConstructor, unknown, unknown, unknown, unknown>;
                    readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                    readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                    readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                    readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly pure: BooleanConstructor;
                    readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                    readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                    readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                    readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly virtualTriggering: BooleanConstructor;
                    readonly zIndex: NumberConstructor;
                    readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                    readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                    readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                    readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                    readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                    readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                    readonly showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                    readonly hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 200, unknown, unknown, unknown>;
                }>>, {
                    ariaHidden: import("vue").ComputedRef<boolean>;
                    entering: import("vue").Ref<boolean>;
                    leaving: import("vue").Ref<boolean>;
                    id: import("vue").Ref<string>;
                    intermediateOpen: import("vue").Ref<boolean>;
                    contentStyle: import("vue").ComputedRef<any>;
                    contentRef: import("vue").Ref<({
                        $: import("vue").ComponentInternalInstance;
                        $data: {};
                        $props: Partial<{
                            offset: number;
                            effect: string;
                            placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                            popperClass: string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[];
                            boundariesPadding: number;
                            fallbackPlacements: import("@popperjs/core").Placement[];
                            gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            popperOptions: Partial<import("@popperjs/core").Options>;
                            strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                            style: import("vue").StyleValue;
                            className: string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[];
                            enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            popperStyle: import("vue").StyleValue;
                            referenceEl: HTMLElement;
                            stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            ariaLabel: string;
                            visible: boolean;
                            pure: boolean;
                            virtualTriggering: boolean;
                        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                            readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                            readonly visible: BooleanConstructor;
                            readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly pure: BooleanConstructor;
                            readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                            readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                            readonly virtualTriggering: BooleanConstructor;
                            readonly zIndex: NumberConstructor;
                            readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                            readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                            readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                            readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                            readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                            readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "offset" | "effect" | "placement" | "popperClass" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "popperOptions" | "strategy" | "style" | "className" | "enterable" | "focusOnShow" | "trapping" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "ariaLabel" | "visible" | "pure" | "virtualTriggering">;
                        $attrs: {
                            [x: string]: unknown;
                        };
                        $refs: {
                            [x: string]: unknown;
                        };
                        $slots: Readonly<{
                            [name: string]: import("vue").Slot | undefined;
                        }>;
                        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                        $emit: (event: string, ...args: any[]) => void;
                        $el: any;
                        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                            readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                            readonly visible: BooleanConstructor;
                            readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly pure: BooleanConstructor;
                            readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                            readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                            readonly virtualTriggering: BooleanConstructor;
                            readonly zIndex: NumberConstructor;
                            readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                            readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                            readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                            readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                            readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                            readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        }, {
                            emit: (event: string, ...args: any[]) => void;
                            props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                                readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                                readonly visible: BooleanConstructor;
                                readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly pure: BooleanConstructor;
                                readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                                readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | (string | {
                                    [x: string]: boolean;
                                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                                readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                                readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                                readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                                readonly virtualTriggering: BooleanConstructor;
                                readonly zIndex: NumberConstructor;
                                readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                                readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                                readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                                readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                                readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                                readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                                readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                            }>> & {
                                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                            }>>;
                            popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                            contentRef: import("vue").Ref<HTMLElement | undefined>;
                            triggerRef: import("vue").Ref<import("../../../..").Measurable | undefined>;
                            role: import("vue").ComputedRef<string>;
                            formItemContext: import("../../../..").FormItemContext | undefined;
                            nextZIndex: () => number;
                            ns: {
                                namespace: import("vue").ComputedRef<string>;
                                b: (blockSuffix?: string) => string;
                                e: (element?: string | undefined) => string;
                                m: (modifier?: string | undefined) => string;
                                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                                em: (element?: string | undefined, modifier?: string | undefined) => string;
                                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                                is: {
                                    (name: string, state: boolean | undefined): string;
                                    (name: string): string;
                                };
                                cssVar: (object: Record<string, string>) => Record<string, string>;
                                cssVarName: (name: string) => string;
                                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                                cssVarBlockName: (name: string) => string;
                            };
                            popperContentRef: import("vue").Ref<HTMLElement | undefined>;
                            focusStartRef: import("vue").Ref<string | HTMLElement>;
                            arrowRef: import("vue").Ref<HTMLElement | undefined>;
                            arrowOffset: import("vue").Ref<number | undefined>;
                            contentZIndex: import("vue").Ref<number>;
                            trapped: import("vue").Ref<boolean>;
                            computedReference: import("vue").ComputedRef<import("../../../..").Measurable | undefined>;
                            contentStyle: import("vue").ComputedRef<any>;
                            contentClass: import("vue").ComputedRef<((string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
                            ariaModal: import("vue").ComputedRef<string | undefined>;
                            createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
                                referenceEl: any;
                                popperContentEl: any;
                                arrowEl: any;
                            }) => import("@popperjs/core").Instance;
                            updatePopper: (shouldUpdateZIndex?: boolean) => void;
                            togglePopperAlive: () => void;
                            onFocusAfterTrapped: () => void;
                            onFocusAfterReleased: () => void;
                            onFocusInTrap: (event: FocusEvent) => void;
                            onFocusoutPrevented: () => void;
                            onReleaseRequested: () => void;
                            ElFocusTrap: import("vue").DefineComponent<{
                                loop: BooleanConstructor;
                                trapped: BooleanConstructor;
                                focusTrapEl: import("vue").PropType<HTMLElement>;
                                focusStartEl: {
                                    type: import("vue").PropType<HTMLElement | "first" | "container">;
                                    default: string;
                                };
                            }, {
                                onKeydown: (e: KeyboardEvent) => void;
                            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested")[], "focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                                loop: BooleanConstructor;
                                trapped: BooleanConstructor;
                                focusTrapEl: import("vue").PropType<HTMLElement>;
                                focusStartEl: {
                                    type: import("vue").PropType<HTMLElement | "first" | "container">;
                                    default: string;
                                };
                            }>> & {
                                onFocusAfterTrapped?: ((...args: any[]) => any) | undefined;
                                onFocusAfterReleased?: ((...args: any[]) => any) | undefined;
                                onFocusin?: ((...args: any[]) => any) | undefined;
                                onFocusout?: ((...args: any[]) => any) | undefined;
                                "onFocusout-prevented"?: ((...args: any[]) => any) | undefined;
                                "onRelease-requested"?: ((...args: any[]) => any) | undefined;
                            }, {
                                loop: boolean;
                                trapped: boolean;
                                focusStartEl: HTMLElement | "first" | "container";
                            }>;
                        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
                            offset: number;
                            effect: string;
                            placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                            popperClass: string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[];
                            boundariesPadding: number;
                            fallbackPlacements: import("@popperjs/core").Placement[];
                            gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            popperOptions: Partial<import("@popperjs/core").Options>;
                            strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                            style: import("vue").StyleValue;
                            className: string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[];
                            enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            popperStyle: import("vue").StyleValue;
                            referenceEl: HTMLElement;
                            stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                            ariaLabel: string;
                            visible: boolean;
                            pure: boolean;
                            virtualTriggering: boolean;
                        }> & {
                            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                            created?: ((() => void) | (() => void)[]) | undefined;
                            beforeMount?: ((() => void) | (() => void)[]) | undefined;
                            mounted?: ((() => void) | (() => void)[]) | undefined;
                            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                            updated?: ((() => void) | (() => void)[]) | undefined;
                            activated?: ((() => void) | (() => void)[]) | undefined;
                            deactivated?: ((() => void) | (() => void)[]) | undefined;
                            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                            destroyed?: ((() => void) | (() => void)[]) | undefined;
                            unmounted?: ((() => void) | (() => void)[]) | undefined;
                            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                        };
                        $forceUpdate: () => void;
                        $nextTick: typeof import("vue").nextTick;
                        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
                    } & Readonly<import("vue").ExtractPropTypes<{
                        readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                        readonly visible: BooleanConstructor;
                        readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly pure: BooleanConstructor;
                        readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                        readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                        readonly virtualTriggering: BooleanConstructor;
                        readonly zIndex: NumberConstructor;
                        readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                        readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                        readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                        readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                        readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                    }>> & {
                        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                    } & import("vue").ShallowUnwrapRef<{
                        emit: (event: string, ...args: any[]) => void;
                        props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                            readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                            readonly visible: BooleanConstructor;
                            readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly pure: BooleanConstructor;
                            readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                            readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                            readonly virtualTriggering: BooleanConstructor;
                            readonly zIndex: NumberConstructor;
                            readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                            readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                            readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                            readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                            readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                            readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        }>>;
                        popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                        contentRef: import("vue").Ref<HTMLElement | undefined>;
                        triggerRef: import("vue").Ref<import("../../../..").Measurable | undefined>;
                        role: import("vue").ComputedRef<string>;
                        formItemContext: import("../../../..").FormItemContext | undefined;
                        nextZIndex: () => number;
                        ns: {
                            namespace: import("vue").ComputedRef<string>;
                            b: (blockSuffix?: string) => string;
                            e: (element?: string | undefined) => string;
                            m: (modifier?: string | undefined) => string;
                            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                            em: (element?: string | undefined, modifier?: string | undefined) => string;
                            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                            is: {
                                (name: string, state: boolean | undefined): string;
                                (name: string): string;
                            };
                            cssVar: (object: Record<string, string>) => Record<string, string>;
                            cssVarName: (name: string) => string;
                            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                            cssVarBlockName: (name: string) => string;
                        };
                        popperContentRef: import("vue").Ref<HTMLElement | undefined>;
                        focusStartRef: import("vue").Ref<string | HTMLElement>;
                        arrowRef: import("vue").Ref<HTMLElement | undefined>;
                        arrowOffset: import("vue").Ref<number | undefined>;
                        contentZIndex: import("vue").Ref<number>;
                        trapped: import("vue").Ref<boolean>;
                        computedReference: import("vue").ComputedRef<import("../../../..").Measurable | undefined>;
                        contentStyle: import("vue").ComputedRef<any>;
                        contentClass: import("vue").ComputedRef<((string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
                        ariaModal: import("vue").ComputedRef<string | undefined>;
                        createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
                            referenceEl: any;
                            popperContentEl: any;
                            arrowEl: any;
                        }) => import("@popperjs/core").Instance;
                        updatePopper: (shouldUpdateZIndex?: boolean) => void;
                        togglePopperAlive: () => void;
                        onFocusAfterTrapped: () => void;
                        onFocusAfterReleased: () => void;
                        onFocusInTrap: (event: FocusEvent) => void;
                        onFocusoutPrevented: () => void;
                        onReleaseRequested: () => void;
                        ElFocusTrap: import("vue").DefineComponent<{
                            loop: BooleanConstructor;
                            trapped: BooleanConstructor;
                            focusTrapEl: import("vue").PropType<HTMLElement>;
                            focusStartEl: {
                                type: import("vue").PropType<HTMLElement | "first" | "container">;
                                default: string;
                            };
                        }, {
                            onKeydown: (e: KeyboardEvent) => void;
                        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested")[], "focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                            loop: BooleanConstructor;
                            trapped: BooleanConstructor;
                            focusTrapEl: import("vue").PropType<HTMLElement>;
                            focusStartEl: {
                                type: import("vue").PropType<HTMLElement | "first" | "container">;
                                default: string;
                            };
                        }>> & {
                            onFocusAfterTrapped?: ((...args: any[]) => any) | undefined;
                            onFocusAfterReleased?: ((...args: any[]) => any) | undefined;
                            onFocusin?: ((...args: any[]) => any) | undefined;
                            onFocusout?: ((...args: any[]) => any) | undefined;
                            "onFocusout-prevented"?: ((...args: any[]) => any) | undefined;
                            "onRelease-requested"?: ((...args: any[]) => any) | undefined;
                        }, {
                            loop: boolean;
                            trapped: boolean;
                            focusStartEl: HTMLElement | "first" | "container";
                        }>;
                    }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
                    destroyed: import("vue").Ref<boolean>;
                    shouldRender: import("vue").ComputedRef<boolean>;
                    shouldShow: import("vue").ComputedRef<boolean>;
                    onClose: (e?: Event | undefined) => void;
                    open: import("vue").Ref<boolean>;
                    onAfterShow: () => void;
                    onBeforeEnter: () => void;
                    onBeforeLeave: () => void;
                    onContentEnter: (event: unknown) => void;
                    onContentLeave: (event: unknown) => void;
                    onTransitionLeave: () => void;
                    onBlur: () => void;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
                    disabled: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    offset: number;
                    effect: string;
                    placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                    popperClass: string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[];
                    showAfter: number;
                    hideAfter: number;
                    boundariesPadding: number;
                    fallbackPlacements: import("@popperjs/core").Placement[];
                    gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    popperOptions: Partial<import("@popperjs/core").Options>;
                    strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                    style: import("vue").StyleValue;
                    className: string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[];
                    enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    popperStyle: import("vue").StyleValue;
                    referenceEl: HTMLElement;
                    stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    visible: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<boolean | null>, unknown, unknown>;
                    pure: boolean;
                    virtualTriggering: boolean;
                    appendTo: import("../../../../utils").BuildPropType<import("../../../../utils").PropWrapper<string | HTMLElement>, unknown, unknown>;
                    content: string;
                    rawContent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    transition: string;
                    teleported: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                    persistent: boolean;
                }> & {
                    beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                    created?: ((() => void) | (() => void)[]) | undefined;
                    beforeMount?: ((() => void) | (() => void)[]) | undefined;
                    mounted?: ((() => void) | (() => void)[]) | undefined;
                    beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                    updated?: ((() => void) | (() => void)[]) | undefined;
                    activated?: ((() => void) | (() => void)[]) | undefined;
                    deactivated?: ((() => void) | (() => void)[]) | undefined;
                    beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                    beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                    destroyed?: ((() => void) | (() => void)[]) | undefined;
                    unmounted?: ((() => void) | (() => void)[]) | undefined;
                    renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                    errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                };
                $forceUpdate: () => void;
                $nextTick: typeof import("vue").nextTick;
                $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
            } & Readonly<import("vue").ExtractPropTypes<{
                readonly appendTo: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | HTMLElement>, string, unknown, unknown, unknown>;
                readonly content: import("../../../../utils").BuildPropReturn<StringConstructor, "", unknown, unknown, unknown>;
                readonly rawContent: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                readonly persistent: BooleanConstructor;
                readonly ariaLabel: StringConstructor;
                readonly visible: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<boolean | null>, null, unknown, unknown, unknown>;
                readonly transition: import("../../../../utils").BuildPropReturn<StringConstructor, "el-fade-in-linear", unknown, unknown, unknown>;
                readonly teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                readonly disabled: import("../../../../utils").BuildPropReturn<BooleanConstructor, unknown, unknown, unknown, unknown>;
                readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                readonly pure: BooleanConstructor;
                readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | (string | {
                    [x: string]: boolean;
                } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                readonly virtualTriggering: BooleanConstructor;
                readonly zIndex: NumberConstructor;
                readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                readonly showAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                readonly hideAfter: import("../../../../utils").BuildPropReturn<NumberConstructor, 200, unknown, unknown, unknown>;
            }>> & import("vue").ShallowUnwrapRef<{
                ariaHidden: import("vue").ComputedRef<boolean>;
                entering: import("vue").Ref<boolean>;
                leaving: import("vue").Ref<boolean>;
                id: import("vue").Ref<string>;
                intermediateOpen: import("vue").Ref<boolean>;
                contentStyle: import("vue").ComputedRef<any>;
                contentRef: import("vue").Ref<({
                    $: import("vue").ComponentInternalInstance;
                    $data: {};
                    $props: Partial<{
                        offset: number;
                        effect: string;
                        placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                        popperClass: string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[];
                        boundariesPadding: number;
                        fallbackPlacements: import("@popperjs/core").Placement[];
                        gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        popperOptions: Partial<import("@popperjs/core").Options>;
                        strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                        style: import("vue").StyleValue;
                        className: string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[];
                        enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        popperStyle: import("vue").StyleValue;
                        referenceEl: HTMLElement;
                        stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        ariaLabel: string;
                        visible: boolean;
                        pure: boolean;
                        virtualTriggering: boolean;
                    }> & Omit<Readonly<import("vue").ExtractPropTypes<{
                        readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                        readonly visible: BooleanConstructor;
                        readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly pure: BooleanConstructor;
                        readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                        readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                        readonly virtualTriggering: BooleanConstructor;
                        readonly zIndex: NumberConstructor;
                        readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                        readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                        readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                        readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                        readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                    }>> & {
                        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "offset" | "effect" | "placement" | "popperClass" | "boundariesPadding" | "fallbackPlacements" | "gpuAcceleration" | "popperOptions" | "strategy" | "style" | "className" | "enterable" | "focusOnShow" | "trapping" | "popperStyle" | "referenceEl" | "stopPopperMouseEvent" | "ariaLabel" | "visible" | "pure" | "virtualTriggering">;
                    $attrs: {
                        [x: string]: unknown;
                    };
                    $refs: {
                        [x: string]: unknown;
                    };
                    $slots: Readonly<{
                        [name: string]: import("vue").Slot | undefined;
                    }>;
                    $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                    $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
                    $emit: (event: string, ...args: any[]) => void;
                    $el: any;
                    $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
                        readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                        readonly visible: BooleanConstructor;
                        readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly pure: BooleanConstructor;
                        readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                        readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                        readonly virtualTriggering: BooleanConstructor;
                        readonly zIndex: NumberConstructor;
                        readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                        readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                        readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                        readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                        readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                    }>> & {
                        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                    }, {
                        emit: (event: string, ...args: any[]) => void;
                        props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                            readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                            readonly visible: BooleanConstructor;
                            readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly pure: BooleanConstructor;
                            readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                            readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | (string | {
                                [x: string]: boolean;
                            } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                            readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                            readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                            readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                            readonly virtualTriggering: BooleanConstructor;
                            readonly zIndex: NumberConstructor;
                            readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                            readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                            readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                            readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                            readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                            readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                            readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                        }>> & {
                            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                        }>>;
                        popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                        contentRef: import("vue").Ref<HTMLElement | undefined>;
                        triggerRef: import("vue").Ref<import("../../../..").Measurable | undefined>;
                        role: import("vue").ComputedRef<string>;
                        formItemContext: import("../../../..").FormItemContext | undefined;
                        nextZIndex: () => number;
                        ns: {
                            namespace: import("vue").ComputedRef<string>;
                            b: (blockSuffix?: string) => string;
                            e: (element?: string | undefined) => string;
                            m: (modifier?: string | undefined) => string;
                            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                            em: (element?: string | undefined, modifier?: string | undefined) => string;
                            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                            is: {
                                (name: string, state: boolean | undefined): string;
                                (name: string): string;
                            };
                            cssVar: (object: Record<string, string>) => Record<string, string>;
                            cssVarName: (name: string) => string;
                            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                            cssVarBlockName: (name: string) => string;
                        };
                        popperContentRef: import("vue").Ref<HTMLElement | undefined>;
                        focusStartRef: import("vue").Ref<string | HTMLElement>;
                        arrowRef: import("vue").Ref<HTMLElement | undefined>;
                        arrowOffset: import("vue").Ref<number | undefined>;
                        contentZIndex: import("vue").Ref<number>;
                        trapped: import("vue").Ref<boolean>;
                        computedReference: import("vue").ComputedRef<import("../../../..").Measurable | undefined>;
                        contentStyle: import("vue").ComputedRef<any>;
                        contentClass: import("vue").ComputedRef<((string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
                        ariaModal: import("vue").ComputedRef<string | undefined>;
                        createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
                            referenceEl: any;
                            popperContentEl: any;
                            arrowEl: any;
                        }) => import("@popperjs/core").Instance;
                        updatePopper: (shouldUpdateZIndex?: boolean) => void;
                        togglePopperAlive: () => void;
                        onFocusAfterTrapped: () => void;
                        onFocusAfterReleased: () => void;
                        onFocusInTrap: (event: FocusEvent) => void;
                        onFocusoutPrevented: () => void;
                        onReleaseRequested: () => void;
                        ElFocusTrap: import("vue").DefineComponent<{
                            loop: BooleanConstructor;
                            trapped: BooleanConstructor;
                            focusTrapEl: import("vue").PropType<HTMLElement>;
                            focusStartEl: {
                                type: import("vue").PropType<HTMLElement | "first" | "container">;
                                default: string;
                            };
                        }, {
                            onKeydown: (e: KeyboardEvent) => void;
                        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested")[], "focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                            loop: BooleanConstructor;
                            trapped: BooleanConstructor;
                            focusTrapEl: import("vue").PropType<HTMLElement>;
                            focusStartEl: {
                                type: import("vue").PropType<HTMLElement | "first" | "container">;
                                default: string;
                            };
                        }>> & {
                            onFocusAfterTrapped?: ((...args: any[]) => any) | undefined;
                            onFocusAfterReleased?: ((...args: any[]) => any) | undefined;
                            onFocusin?: ((...args: any[]) => any) | undefined;
                            onFocusout?: ((...args: any[]) => any) | undefined;
                            "onFocusout-prevented"?: ((...args: any[]) => any) | undefined;
                            "onRelease-requested"?: ((...args: any[]) => any) | undefined;
                        }, {
                            loop: boolean;
                            trapped: boolean;
                            focusStartEl: HTMLElement | "first" | "container";
                        }>;
                    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, {
                        offset: number;
                        effect: string;
                        placement: import("../../../../utils").BuildPropType<StringConstructor, import("@popperjs/core").Placement, unknown>;
                        popperClass: string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[];
                        boundariesPadding: number;
                        fallbackPlacements: import("@popperjs/core").Placement[];
                        gpuAcceleration: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        popperOptions: Partial<import("@popperjs/core").Options>;
                        strategy: import("../../../../utils").BuildPropType<StringConstructor, "fixed" | "absolute", unknown>;
                        style: import("vue").StyleValue;
                        className: string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[];
                        enterable: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        focusOnShow: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        trapping: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        popperStyle: import("vue").StyleValue;
                        referenceEl: HTMLElement;
                        stopPopperMouseEvent: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
                        ariaLabel: string;
                        visible: boolean;
                        pure: boolean;
                        virtualTriggering: boolean;
                    }> & {
                        beforeCreate?: ((() => void) | (() => void)[]) | undefined;
                        created?: ((() => void) | (() => void)[]) | undefined;
                        beforeMount?: ((() => void) | (() => void)[]) | undefined;
                        mounted?: ((() => void) | (() => void)[]) | undefined;
                        beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
                        updated?: ((() => void) | (() => void)[]) | undefined;
                        activated?: ((() => void) | (() => void)[]) | undefined;
                        deactivated?: ((() => void) | (() => void)[]) | undefined;
                        beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
                        beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
                        destroyed?: ((() => void) | (() => void)[]) | undefined;
                        unmounted?: ((() => void) | (() => void)[]) | undefined;
                        renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                        renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
                        errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
                    };
                    $forceUpdate: () => void;
                    $nextTick: typeof import("vue").nextTick;
                    $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
                } & Readonly<import("vue").ExtractPropTypes<{
                    readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                    readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                    readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                    readonly visible: BooleanConstructor;
                    readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly pure: BooleanConstructor;
                    readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                    readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                    readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                    readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                    readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                    readonly virtualTriggering: BooleanConstructor;
                    readonly zIndex: NumberConstructor;
                    readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                    readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                    readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                    readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                    readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                    readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                    readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                }>> & {
                    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                } & import("vue").ShallowUnwrapRef<{
                    emit: (event: string, ...args: any[]) => void;
                    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
                        readonly style: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly className: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly effect: import("../../../../utils").BuildPropReturn<StringConstructor, "dark", unknown, unknown, unknown>;
                        readonly visible: BooleanConstructor;
                        readonly enterable: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly pure: BooleanConstructor;
                        readonly focusOnShow: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly trapping: import("../../../../utils").BuildPropReturn<BooleanConstructor, false, unknown, unknown, unknown>;
                        readonly popperClass: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | (string | {
                            [x: string]: boolean;
                        } | any)[])[])[])[])[])[])[])[])[])[])[]>, unknown, unknown, unknown, unknown>;
                        readonly popperStyle: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("vue").StyleValue>, unknown, unknown, unknown, unknown>;
                        readonly referenceEl: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<HTMLElement>, unknown, unknown, unknown, unknown>;
                        readonly stopPopperMouseEvent: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly ariaLabel: import("../../../../utils").BuildPropReturn<StringConstructor, undefined, unknown, unknown, unknown>;
                        readonly virtualTriggering: BooleanConstructor;
                        readonly zIndex: NumberConstructor;
                        readonly boundariesPadding: import("../../../../utils").BuildPropReturn<NumberConstructor, 0, unknown, unknown, unknown>;
                        readonly fallbackPlacements: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<import("@popperjs/core").Placement[]>, () => never[], unknown, unknown, unknown>;
                        readonly gpuAcceleration: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
                        readonly offset: import("../../../../utils").BuildPropReturn<NumberConstructor, 12, unknown, unknown, unknown>;
                        readonly placement: import("../../../../utils").BuildPropReturn<StringConstructor, "bottom", unknown, import("@popperjs/core").Placement, unknown>;
                        readonly popperOptions: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<Partial<import("@popperjs/core").Options>>, () => {}, unknown, unknown, unknown>;
                        readonly strategy: import("../../../../utils").BuildPropReturn<StringConstructor, "absolute", unknown, "fixed" | "absolute", unknown>;
                    }>> & {
                        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                    }>>;
                    popperInstanceRef: import("vue").Ref<import("@popperjs/core").Instance | undefined>;
                    contentRef: import("vue").Ref<HTMLElement | undefined>;
                    triggerRef: import("vue").Ref<import("../../../..").Measurable | undefined>;
                    role: import("vue").ComputedRef<string>;
                    formItemContext: import("../../../..").FormItemContext | undefined;
                    nextZIndex: () => number;
                    ns: {
                        namespace: import("vue").ComputedRef<string>;
                        b: (blockSuffix?: string) => string;
                        e: (element?: string | undefined) => string;
                        m: (modifier?: string | undefined) => string;
                        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                        em: (element?: string | undefined, modifier?: string | undefined) => string;
                        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                        is: {
                            (name: string, state: boolean | undefined): string;
                            (name: string): string;
                        };
                        cssVar: (object: Record<string, string>) => Record<string, string>;
                        cssVarName: (name: string) => string;
                        cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                        cssVarBlockName: (name: string) => string;
                    };
                    popperContentRef: import("vue").Ref<HTMLElement | undefined>;
                    focusStartRef: import("vue").Ref<string | HTMLElement>;
                    arrowRef: import("vue").Ref<HTMLElement | undefined>;
                    arrowOffset: import("vue").Ref<number | undefined>;
                    contentZIndex: import("vue").Ref<number>;
                    trapped: import("vue").Ref<boolean>;
                    computedReference: import("vue").ComputedRef<import("../../../..").Measurable | undefined>;
                    contentStyle: import("vue").ComputedRef<any>;
                    contentClass: import("vue").ComputedRef<((string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | (string | {
                        [x: string]: boolean;
                    } | any)[])[])[])[])[])[])[])[])[])[])[]) | undefined)[]>;
                    ariaModal: import("vue").ComputedRef<string | undefined>;
                    createPopperInstance: ({ referenceEl, popperContentEl, arrowEl }: {
                        referenceEl: any;
                        popperContentEl: any;
                        arrowEl: any;
                    }) => import("@popperjs/core").Instance;
                    updatePopper: (shouldUpdateZIndex?: boolean) => void;
                    togglePopperAlive: () => void;
                    onFocusAfterTrapped: () => void;
                    onFocusAfterReleased: () => void;
                    onFocusInTrap: (event: FocusEvent) => void;
                    onFocusoutPrevented: () => void;
                    onReleaseRequested: () => void;
                    ElFocusTrap: import("vue").DefineComponent<{
                        loop: BooleanConstructor;
                        trapped: BooleanConstructor;
                        focusTrapEl: import("vue").PropType<HTMLElement>;
                        focusStartEl: {
                            type: import("vue").PropType<HTMLElement | "first" | "container">;
                            default: string;
                        };
                    }, {
                        onKeydown: (e: KeyboardEvent) => void;
                    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested")[], "focusAfterTrapped" | "focusAfterReleased" | "focusin" | "focusout" | "focusout-prevented" | "release-requested", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                        loop: BooleanConstructor;
                        trapped: BooleanConstructor;
                        focusTrapEl: import("vue").PropType<HTMLElement>;
                        focusStartEl: {
                            type: import("vue").PropType<HTMLElement | "first" | "container">;
                            default: string;
                        };
                    }>> & {
                        onFocusAfterTrapped?: ((...args: any[]) => any) | undefined;
                        onFocusAfterReleased?: ((...args: any[]) => any) | undefined;
                        onFocusin?: ((...args: any[]) => any) | undefined;
                        onFocusout?: ((...args: any[]) => any) | undefined;
                        "onFocusout-prevented"?: ((...args: any[]) => any) | undefined;
                        "onRelease-requested"?: ((...args: any[]) => any) | undefined;
                    }, {
                        loop: boolean;
                        trapped: boolean;
                        focusStartEl: HTMLElement | "first" | "container";
                    }>;
                }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
                destroyed: import("vue").Ref<boolean>;
                shouldRender: import("vue").ComputedRef<boolean>;
                shouldShow: import("vue").ComputedRef<boolean>;
                onClose: (e?: Event | undefined) => void;
                open: import("vue").Ref<boolean>;
                onAfterShow: () => void;
                onBeforeEnter: () => void;
                onBeforeLeave: () => void;
                onContentEnter: (event: unknown) => void;
                onContentLeave: (event: unknown) => void;
                onTransitionLeave: () => void;
                onBlur: () => void;
            }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
            open: import("vue").Ref<boolean>;
            hide: () => void;
            isFocusInsideContent: () => boolean | undefined;
            updatePopper: () => void;
            onOpen: (event?: Event | undefined) => void;
            onClose: (event?: Event | undefined) => void;
        }> & {} & {} & import("vue").ComponentCustomProperties) | null>;
        popperPaneRef: import("vue").ComputedRef<HTMLElement | undefined>;
        tags: import("vue").Ref<HTMLElement | null>;
        selectWrapper: import("vue").Ref<HTMLElement | null>;
        scrollbar: import("vue").Ref<{
            handleScroll: () => void;
        } | null>;
        wrapperKls: import("vue").ComputedRef<string[]>;
        selectTagsStyle: import("vue").ComputedRef<{
            maxWidth: string;
            width: string;
        }>;
        nsSelect: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string | undefined) => string;
            m: (modifier?: string | undefined) => string;
            be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
            em: (element?: string | undefined, modifier?: string | undefined) => string;
            bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
            bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "clear" | "focus" | "blur" | "visible-change" | "remove-tag")[], "update:modelValue" | "change" | "clear" | "blur" | "focus" | "visible-change" | "remove-tag", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        name: StringConstructor;
        id: StringConstructor;
        modelValue: {
            type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor | ArrayConstructor)[];
            default: undefined;
        };
        autocomplete: {
            type: StringConstructor;
            default: string;
        };
        automaticDropdown: BooleanConstructor;
        size: {
            type: import("vue").PropType<"" | "default" | "small" | "large">;
            validator: (val: string) => val is "" | "default" | "small" | "large";
        };
        effect: {
            type: import("vue").PropType<string>;
            default: string;
        };
        disabled: BooleanConstructor;
        clearable: BooleanConstructor;
        filterable: BooleanConstructor;
        allowCreate: BooleanConstructor;
        loading: BooleanConstructor;
        popperClass: {
            type: StringConstructor;
            default: string;
        };
        remote: BooleanConstructor;
        loadingText: StringConstructor;
        noMatchText: StringConstructor;
        noDataText: StringConstructor;
        remoteMethod: FunctionConstructor;
        filterMethod: FunctionConstructor;
        multiple: BooleanConstructor;
        multipleLimit: {
            type: NumberConstructor;
            default: number;
        };
        placeholder: {
            type: StringConstructor;
        };
        defaultFirstOption: BooleanConstructor;
        reserveKeyword: {
            type: BooleanConstructor;
            default: boolean;
        };
        valueKey: {
            type: StringConstructor;
            default: string;
        };
        collapseTags: BooleanConstructor;
        collapseTagsTooltip: {
            type: BooleanConstructor;
            default: boolean;
        };
        teleported: import("../../../../utils").BuildPropReturn<BooleanConstructor, true, unknown, unknown, unknown>;
        persistent: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearIcon: {
            type: import("vue").PropType<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>;
            default: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
        };
        fitInputWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        suffixIcon: {
            type: import("vue").PropType<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>;
            default: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
        };
        tagType: {
            default: string;
            type: import("vue").PropType<import("../../../../utils").BuildPropType<StringConstructor, "" | "success" | "warning" | "info" | "danger", unknown>>;
            required: false;
            validator: ((val: unknown) => boolean) | undefined;
            __elPropsReservedKey: true;
        };
    }>> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onFocus?: ((...args: any[]) => any) | undefined;
        "onVisible-change"?: ((...args: any[]) => any) | undefined;
        "onRemove-tag"?: ((...args: any[]) => any) | undefined;
    }, {
        disabled: boolean;
        loading: boolean;
        modelValue: string | number | boolean | unknown[] | Record<string, any>;
        effect: string;
        valueKey: string;
        popperClass: string;
        teleported: import("../../../../utils").BuildPropType<BooleanConstructor, unknown, unknown>;
        persistent: boolean;
        autocomplete: string;
        clearable: boolean;
        suffixIcon: string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>;
        multiple: boolean;
        filterable: boolean;
        collapseTags: boolean;
        collapseTagsTooltip: boolean;
        tagType: import("../../../../utils").BuildPropType<StringConstructor, "" | "success" | "warning" | "info" | "danger", unknown>;
        clearIcon: string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>;
        automaticDropdown: boolean;
        allowCreate: boolean;
        remote: boolean;
        multipleLimit: number;
        defaultFirstOption: boolean;
        reserveKeyword: boolean;
        fitInputWidth: boolean;
    }>> & {
        Option: import("vue").DefineComponent<{
            value: {
                required: true;
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
            };
            label: (StringConstructor | NumberConstructor)[];
            created: BooleanConstructor;
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            currentLabel: import("vue").ComputedRef<any>;
            itemSelected: import("vue").ComputedRef<boolean>;
            isDisabled: import("vue").ComputedRef<any>;
            select: import("element-plus/es/components/select").SelectContext | undefined;
            hoverItem: () => void;
            visible: import("vue").Ref<boolean>;
            hover: import("vue").Ref<boolean>;
            selectOptionClick: () => void;
            states: {
                index: number;
                groupDisabled: boolean;
                visible: boolean;
                hitState: boolean;
                hover: boolean;
            };
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            value: {
                required: true;
                type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
            };
            label: (StringConstructor | NumberConstructor)[];
            created: BooleanConstructor;
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>>, {
            disabled: boolean;
            created: boolean;
        }>;
        OptionGroup: import("vue").DefineComponent<{
            label: StringConstructor;
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            visible: import("vue").Ref<boolean>;
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string | undefined) => string;
                m: (modifier?: string | undefined) => string;
                be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
                em: (element?: string | undefined, modifier?: string | undefined) => string;
                bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
                bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            label: StringConstructor;
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>>, {
            disabled: boolean;
        }>;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "page-size-change"[], "page-size-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly pageSize: import("../../../../utils").BuildPropReturn<NumberConstructor, unknown, true, unknown, unknown>;
    readonly pageSizes: import("../../../../utils").BuildPropReturn<import("../../../../utils").PropWrapper<number[]>, () => [10, 20, 30, 40, 50, 100], unknown, unknown, unknown>;
    readonly popperClass: import("../../../../utils").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
    readonly disabled: BooleanConstructor;
    readonly size: import("../../../../utils").BuildPropReturn<StringConstructor, "default", unknown, unknown, unknown>;
}>> & {
    "onPage-size-change"?: ((...args: any[]) => any) | undefined;
}, {
    size: string;
    disabled: boolean;
    popperClass: string;
    pageSizes: number[];
}>;
export default _default;
